from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
import logging

from app.database import engine, get_db, Base
from app import models, schemas

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ
Base.metadata.create_all(bind=engine)

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="PerkUP API",
    description="Backend API –¥–ª—è PerkUP Ecosystem",
    version="1.0.0"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
def root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ API"""
    return {
        "message": "ü§ñ‚òï PerkUP API is running!",
        "version": "1.0.0",
        "status": "healthy",
        "endpoints": {
            "health": "/health",
            "locations": "/api/v1/locations",
            "docs": "/docs"
        }
    }

@app.get("/health")
def health(db: Session = Depends(get_db)):
    """Health check –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ë–î"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
        db.execute("SELECT 1")
        return {
            "status": "healthy",
            "service": "perkup-backend",
            "database": "connected"
        }
    except Exception as e:
        logger.error(f"Database connection failed: {e}")
        return {
            "status": "unhealthy",
            "service": "perkup-backend",
            "database": "disconnected",
            "error": str(e)
        }

@app.get("/api/v1/locations", response_model=list[schemas.Location])
def get_locations(db: Session = Depends(get_db)):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü—ñ–π –∑ –ë–î"""
    logger.info("Getting locations from database")
    
    try:
        locations = db.query(models.Location).filter(
            models.Location.is_active == True
        ).all()
        
        logger.info(f"Found {len(locations)} locations")
        
        # –Ø–∫—â–æ –ª–æ–∫–∞—Ü—ñ–π –Ω–µ–º–∞—î - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ö–∞—Ä–¥–∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç—É
        if not locations:
            logger.warning("No locations in database, returning hardcoded data")
            return [
                {
                    "id": 1,
                    "name": "Mark Mall",
                    "slug": "mark-mall",
                    "address": "–ö–∏—ó–≤—Å—å–∫–∞, 239, –ë—Ä–æ–≤–∞—Ä–∏",
                    "city": "–ë—Ä–æ–≤–∞—Ä–∏",
                    "latitude": 50.514794,
                    "longitude": 30.782308,
                    "radius_meters": 100,
                    "description": "–ö–∞–≤'—è—Ä–Ω—è –≤ –¢–†–¶ Mark Mall",
                    "is_active": True,
                    "created_at": "2025-01-01T00:00:00",
                    "updated_at": None
                },
                {
                    "id": 2,
                    "name": "–ü–∞—Ä–∫ –ü—Ä–∏–æ–∑–µ—Ä–Ω–∏–π",
                    "slug": "park-priozerny",
                    "address": "–≤—É–ª. –§—ñ–∞–ª–∫–æ–≤—Å—å–∫–æ–≥–æ, 27–∞, –ë—Ä–æ–≤–∞—Ä–∏",
                    "city": "–ë—Ä–æ–≤–∞—Ä–∏",
                    "latitude": 50.501265,
                    "longitude": 30.754011,
                    "radius_meters": 100,
                    "description": "–ö–∞–≤'—è—Ä–Ω—è –±—ñ–ª—è –ø–∞—Ä–∫—É",
                    "is_active": True,
                    "created_at": "2025-01-01T00:00:00",
                    "updated_at": None
                }
            ]
        
        return locations
        
    except Exception as e:
        logger.error(f"Error getting locations: {e}")
        # Fallback –Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥ —è–∫—â–æ –ë–î –Ω–µ –ø—Ä–∞—Ü—é—î
        return [
            {
                "id": 1,
                "name": "Mark Mall",
                "slug": "mark-mall",
                "address": "–ö–∏—ó–≤—Å—å–∫–∞, 239, –ë—Ä–æ–≤–∞—Ä–∏",
                "city": "–ë—Ä–æ–≤–∞—Ä–∏",
                "latitude": 50.514794,
                "longitude": 30.782308,
                "radius_meters": 100,
                "description": "–ö–∞–≤'—è—Ä–Ω—è –≤ –¢–†–¶ Mark Mall",
                "is_active": True,
                "created_at": "2025-01-01T00:00:00",
                "updated_at": None
            },
            {
                "id": 2,
                "name": "–ü–∞—Ä–∫ –ü—Ä–∏–æ–∑–µ—Ä–Ω–∏–π",
                "slug": "park-priozerny",
                "address": "–≤—É–ª. –§—ñ–∞–ª–∫–æ–≤—Å—å–∫–æ–≥–æ, 27–∞, –ë—Ä–æ–≤–∞—Ä–∏",
                "city": "–ë—Ä–æ–≤–∞—Ä–∏",
                "latitude": 50.501265,
                "longitude": 30.754011,
                "radius_meters": 100,
                "description": "–ö–∞–≤'—è—Ä–Ω—è –±—ñ–ª—è –ø–∞—Ä–∫—É",
                "is_active": True,
                "created_at": "2025-01-01T00:00:00",
                "updated_at": None
            }
        ]

@app.post("/api/v1/locations", response_model=schemas.Location)
def create_location(location: schemas.LocationCreate, db: Session = Depends(get_db)):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –ª–æ–∫–∞—Ü—ñ—é"""
    db_location = models.Location(**location.dict())
    db.add(db_location)
    db.commit()
    db.refresh(db_location)
    return db_locationgit add backend/app/main.py